// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };


    combos {
        compatible = "zmk,combos";
        
	combo_gaming {
            timeout-ms = <50>;
            key-positions = <0 1 2 3>;
            bindings = <&tog 4>;
        };
        
        combo_bt_l {
            timeout-ms = <50>;
            key-positions = <10 11 12 13>;
            bindings = <&tog 6>;
        };

	combo_bt_r {
	    timeout-ms = <50>;
	    key-positions = <27 28 29 30>;
	    bindings = <&tog 6>;
	};
    };


    conditional_layers {
        compatible = "zmk,conditional-layers";
        fn {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    
    
    keymap {
        compatible = "zmk,keymap";
	
	
        base {
            bindings = <
		&ht ESC Q	&kp W		&kp F		&kp P			&kp B			&kp J			&kp L			&kp U		&kp Y			&kp SEMI
		&mt TAB A	&mt LALT R	&mt LCTL S	&mt LGUI T		&kp G			&kp M			&mt RGUI N	 	&mt LCTRL E	&mt LALT I		&mt TAB O
		&kp Z		&kp X		&kp C		&kp D			&kp V			&kp K			&kp H			&kp COMMA	&kp PERIOD		&kp FSLH
                         					&lt 2 RET		&lt 1 SPACE		&kp LSHFT		&kp BSPC
            >;
        };
        
        
        nav {
            bindings = <
		&kp ESC		&none		&none		&none			&kp LA(F4)		&kp HOME		&kp PG_DN	&kp PG_UP	&none		&kp C_VOL_UP
		&kp TAB		&kp LALT	&kp LCTRL	&kp LGUI		&none			&kp LEFT		&kp DOWN	&kp UP		&kp RIGHT  	&kp C_MUTE
		&kp INS		&kp RALT	&none		&kp PSCRN		&kp LS(LA(INS))		&kp END			&none		&none		&none		&kp C_VOL_DN
								&trans			&trans			&trans			&kp DEL
            >;
        };
        
        
        num {
            bindings = <
		&kp ESC		&none		&kp GRAVE	&kp MINUS		&none			&kp RIGHT_BRACKET	&kp N7			&kp N8		&kp N9			&kp APOS
		&kp TAB		&kp LALT	&kp LCTRL	&kp LGUI		&none			&kp LEFT_BRACKET	&kp N4			&kp N5		&kp N6			&kp N0
		&none		&kp RALT	&none           &none			&none			&kp EQUAL		&kp N1			&kp N2		&kp N3			&kp PIPE
								&trans			&trans			&trans			&kp DEL
            >;
        };
        
        
        fn {
            bindings = <
		&kp ESC		&none		&kp UP		&none			&none			&none			&kp F7			&kp F8		&kp F9			&none
		&kp LCTRL	&kp LEFT	&kp DOWN	&kp RIGHT		&kp LGUI		&kp LGUI		&kp F4			&kp F5		&kp F6			&kp F10
		&none		&none		&none		&none			&none			&none			&ht F11 F1		&ht F12 F2	&kp F3			&none
								&trans			&trans			&trans			&kp DEL
            >;
        };
	
	
	gaming {
            bindings = <
		&kp ESC		&kp Q		&kp W		&kp E			&kp R			&none			&none			&none		&none			&kp GRAVE
		&kp LSHFT	&kp A		&kp S		&kp D			&kp F	 		&none			&kp LA(TAB)		&none		&none			&none
		&kp LCTRL	&kp Z		&kp X		&kp C			&kp G			&none			&none			&none		&none			&none
								&lt 5 RET		&kp SPACE		&none			&none
            >;
        };
        
	
	gaming+ {
            bindings = <
		&kp DEL		&kp N1		&kp N2		&kp N3			&kp N4			&none			&none			&none		&none			&none
		&kp TAB		&mt ALT I	&mt LCTRL M	&mt LGUI G		&ht Y T			&none			&none			&none		&none			&none
		&kp PERIOD	&kp N5		&kp N6		&kp N7			&kp N8			&none			&none			&none		&none			&none
								&trans			&trans			&none			&none			&none		&none			&none
            >;
        };


        hardware {
            bindings = <
		&reset		&bootloader	&none		&none			&none			&none			&none			&none		&bootloader		&reset
		&none		&none		&none		&none			&none			&bt BT_SEL 0		&bt BT_SEL 1		&bt BT_SEL 2	&bt BT_SEL 3		&bt BT_SEL 4
		&none		&none		&none		&none			&none			&none			&bt BT_PRV		&bt BT_NXT	&none			&none
								&none			&none			&none			&bt BT_CLR
            >;
        };
    };
};
